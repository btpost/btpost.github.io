<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.0.0">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2019-09-11T11:28:26-05:00</updated><id>http://localhost:4000/feed.xml</id><entry><title type="html">Test</title><link href="http://localhost:4000/2019/09/08/test.html" rel="alternate" type="text/html" title="Test" /><published>2019-09-08T00:00:00-05:00</published><updated>2019-09-08T00:00:00-05:00</updated><id>http://localhost:4000/2019/09/08/test</id><content type="html" xml:base="http://localhost:4000/2019/09/08/test.html">&lt;p&gt;A banana is an edible fruit – botanically a berry – produced by several kinds
of large herbaceous flowering plants in the genus Musa.&lt;/p&gt;

&lt;p&gt;In some countries, bananas used for cooking may be called “plantains”,
distinguishing them from dessert bananas. The fruit is variable in size, color,
and firmness, but is usually elongated and curved, with soft flesh rich in
starch covered with a rind, which may be green, yellow, red, purple, or brown
when ripe.&lt;/p&gt;</content><author><name></name></author><summary type="html">A banana is an edible fruit – botanically a berry – produced by several kinds of large herbaceous flowering plants in the genus Musa.</summary></entry><entry><title type="html">Test2</title><link href="http://localhost:4000/2019/09/08/test2.html" rel="alternate" type="text/html" title="Test2" /><published>2019-09-08T00:00:00-05:00</published><updated>2019-09-08T00:00:00-05:00</updated><id>http://localhost:4000/2019/09/08/test2</id><content type="html" xml:base="http://localhost:4000/2019/09/08/test2.html">&lt;p&gt;An apple is a sweet, edible fruit produced by an apple tree. Blah blah blah blah blah Blah blah blah blah blah Blah blah blah blah blah Blah blah blah blah blah Blah blah blah blah blah Blah blah blah blah blah&lt;/p&gt;

&lt;p&gt;Apple trees are cultivated worldwide, and are the most widely grown species in
the genus Malus. The tree originated in Central Asia, where its wild ancestor,
Malus sieversii, is still found today. Apples have been grown for thousands of
years in Asia and Europe, and were brought to North America by European
colonists.&lt;/p&gt;</content><author><name></name></author><summary type="html">An apple is a sweet, edible fruit produced by an apple tree. Blah blah blah blah blah Blah blah blah blah blah Blah blah blah blah blah Blah blah blah blah blah Blah blah blah blah blah Blah blah blah blah blah</summary></entry><entry><title type="html">Kiwifruit</title><link href="http://localhost:4000/2018/08/22/kiwifruit.html" rel="alternate" type="text/html" title="Kiwifruit" /><published>2018-08-22T00:00:00-05:00</published><updated>2018-08-22T00:00:00-05:00</updated><id>http://localhost:4000/2018/08/22/kiwifruit</id><content type="html" xml:base="http://localhost:4000/2018/08/22/kiwifruit.html">&lt;p&gt;Kiwifruit (often abbreviated as kiwi), or Chinese gooseberry is the edible
berry of several species of woody vines in the genus Actinidia.&lt;/p&gt;

&lt;p&gt;The most common cultivar group of kiwifruit is oval, about the size of a large
hen’s egg (5–8 cm (2.0–3.1 in) in length and 4.5–5.5 cm (1.8–2.2 in) in
diameter). It has a fibrous, dull greenish-brown skin and bright green or
golden flesh with rows of tiny, black, edible seeds. The fruit has a soft
texture, with a sweet and unique flavor.&lt;/p&gt;</content><author><name></name></author><summary type="html">Kiwifruit (often abbreviated as kiwi), or Chinese gooseberry is the edible berry of several species of woody vines in the genus Actinidia.</summary></entry><entry><title type="html">Apples</title><link href="http://localhost:4000/2018/08/21/apples.html" rel="alternate" type="text/html" title="Apples" /><published>2018-08-21T00:00:00-05:00</published><updated>2018-08-21T00:00:00-05:00</updated><id>http://localhost:4000/2018/08/21/apples</id><content type="html" xml:base="http://localhost:4000/2018/08/21/apples.html">&lt;p&gt;An apple is a sweet, edible fruit produced by an apple tree. Blah blah blah blah blah Blah blah blah blah blah Blah blah blah blah blah Blah blah blah blah blah Blah blah blah blah blah Blah blah blah blah blah&lt;/p&gt;

&lt;p&gt;Apple trees are cultivated worldwide, and are the most widely grown species in
the genus Malus. The tree originated in Central Asia, where its wild ancestor,
Malus sieversii, is still found today. Apples have been grown for thousands of
years in Asia and Europe, and were brought to North America by European
colonists.&lt;/p&gt;</content><author><name></name></author><summary type="html">An apple is a sweet, edible fruit produced by an apple tree. Blah blah blah blah blah Blah blah blah blah blah Blah blah blah blah blah Blah blah blah blah blah Blah blah blah blah blah Blah blah blah blah blah</summary></entry><entry><title type="html">Real Numbers</title><link href="http://localhost:4000/2018/05/03/Real-Numbers.html" rel="alternate" type="text/html" title="Real Numbers" /><published>2018-05-03T00:00:00-05:00</published><updated>2018-05-03T00:00:00-05:00</updated><id>http://localhost:4000/2018/05/03/Real-Numbers</id><content type="html" xml:base="http://localhost:4000/2018/05/03/Real-Numbers.html">&lt;p&gt;This is a question that may not have occurred to you. What is a real number? Can we explicitly define all of them?  It’s harder than it sounds. It took us until about 100 years ago to really pin down what they are, and how to construct them. Here’s a brief synopsis of their history, and some modern definitions of the original uncountable set.&lt;/p&gt;

&lt;h2 id=&quot;naive-definitions&quot;&gt;Naive Definitions&lt;/h2&gt;

&lt;p&gt;Humans have been using numbers since the inception of civilization. The Egyptians were among the first to start making use of fractions. Then, Indian mathematicians found some numbers that couldn’t be represented by fractions. They left it there. The Greeks tried to clearly explained what irrationality was, and why it was. Euclid tried to give a definition of what he called “magnitudes” in Book V of &lt;em&gt;The&lt;/em&gt; &lt;em&gt;Elements&lt;/em&gt;, but it doesn’t make a lot of sense by modern standards. Basically, he described them as ratios of other magnitudes, but he doesn’t really give an axiomatic definition for magnitudes in the first place. The most important piece of this whole magnitude thing is probably def. 4, which says, “Magnitudes are said to have a ratio to one another which can, when multiplied, exceed one another.” Basically, for every two numbers, where the second is bigger than the first, there is a third number we can multiply by the first so that their product will be greater than the second number. It doesn’t matter how big the second number is. We now call this the Archimedean Property, because Otto Stolz decided that’s what he wanted to call it (he had his reasons). What this really means is that &lt;a href=&quot;https://en.wikipedia.org/wiki/Infinitesimal&quot;&gt;infinitesimals&lt;/a&gt; are not numbers. As an aside, Euclid did conceive of an equivalence relation between ratios, and defined most of our modern axioms for &lt;a href=&quot;https://en.wikipedia.org/wiki/Equivalence_relation&quot;&gt;equivalence relations&lt;/a&gt; (he didn’t explicitly state symmetry).&lt;/p&gt;

&lt;p&gt;For about 2000 years, this is as far as we really cared to go on the topic. René Descartes (of Cartesian plane fame) was the first to define the set of real numbers. He called them “real”, as opposed to the “imaginary”, numbers that are multiples of &lt;script type=&quot;math/tex&quot;&gt;\sqrt{-1}&lt;/script&gt; which he decided were fine to use now, given the right context (It took mathematicians a long time to widely accept imaginary numbers. A lot of people thought Descartes was crazy for using them). This definition of real numbers didn’t really bother anyone, because they were busy freaking out about this whole new set of other numbers. Simon Stevin popularized decimal notation in the west, and posited that rational and irrational numbers could be grouped together since they could both be represented by infinite decimals. So, at this point, it was just whatever digits you throw together, that’s a real number. Equivalently, any value you can get from a number line (at least I think these two things are equivalent).&lt;/p&gt;

&lt;p&gt;Things didn’t get serious until the 19th century, when mathematicians got really into rigor and having a clear axiomatic basis for everything.&lt;/p&gt;

&lt;h2 id=&quot;transcendental-numbers&quot;&gt;Transcendental Numbers&lt;/h2&gt;
&lt;p&gt;I’m going to take a quick detour from real number definitions to talk about &lt;em&gt;transcendental&lt;/em&gt; numbers. We can split the real numbers into two groups, besides the classic rational and irrational distinction. These are &lt;em&gt;algebraic&lt;/em&gt; and &lt;em&gt;transcendental&lt;/em&gt; numbers. Algebraic numbers are solutions to polynomials with rational coefficients.  For example, &lt;script type=&quot;math/tex&quot;&gt;\sqrt{2}&lt;/script&gt; is a solution for the polynomial &lt;script type=&quot;math/tex&quot;&gt;f(x) = x^2 - 2&lt;/script&gt;. This covers all radicals (but not necessarily all &lt;a href=&quot;https://en.wikipedia.org/wiki/Linear_combination&quot;&gt;linear combinations&lt;/a&gt; of radicals). But, there are some irrational numbers we have proven not to be solutions  to polynomials. These are transcendental.  These include π, &lt;em&gt;e&lt;/em&gt;, and infinitely many others. Proving that a number is transcendental is non-trivial, and it took until 1794 for Adrien-Marie Legendre to prove that π was not the square root of a rational number. Evaristé Galois came up with some bonkers math in 1832 that helped us figure out what polynomials could be solved with standard arithmetic. This became the basis for the study of transcendental numbers. Then in 1840, Joseph Liouville showed &lt;script type=&quot;math/tex&quot;&gt;e&lt;/script&gt; and &lt;script type=&quot;math/tex&quot;&gt;e^2&lt;/script&gt; were not roots of a quadratic. He also showed transcendental numbers existed (we weren’t sure before because we had only showed these numbers couldn’t be solutions to specific sets of rational polynomials, and not all of them). Charles Hermite showed that &lt;em&gt;e&lt;/em&gt; was transcendental in 1873, and then Ferdinand von Lindemann showed π  was transcendental in 1882. This new information about how numbers were constructed had a huge impact on how mathematicians went about defining real numbers.&lt;/p&gt;
&lt;h2 id=&quot;rigorous-definitions-of-real-numbers&quot;&gt;Rigorous Definitions of Real Numbers&lt;/h2&gt;
&lt;p&gt;Georg Cantor realized something very important during his studies of cardinality of sets: you can come up with a way to count natural, integer and rational numbers. This led him to conclude that those sets are the same size (because we can map them to each other with a one-to-one function), which seems strange, but cardinality isn’t what this post is about. The important thing is that Cantor showed you can’t count the real numbers. Though not his original proof, his &lt;a href=&quot;https://en.wikipedia.org/wiki/Cantor%27s_diagonal_argument&quot;&gt;diagnolisation argument&lt;/a&gt; is a very famous way showing this fact. So, if we can’t count the things, how do we know what they are. There are two ways to do this: axiomatization and construction.&lt;/p&gt;
&lt;h3 id=&quot;axiomatization&quot;&gt;Axiomatization&lt;/h3&gt;
&lt;p&gt;An aoximatic approach defines the real numbers by a list of rules they must follow. Here are the four axioms used in modernity:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;script type=&quot;math/tex&quot;&gt;\mathbb{R}&lt;/script&gt; forms a field with the operations &lt;script type=&quot;math/tex&quot;&gt;\times&lt;/script&gt; and &lt;script type=&quot;math/tex&quot;&gt;+&lt;/script&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you don’t know what a field is, I’ll give you a definition in a nutshell. Basically, it’s a set that contains at least a unity, and a zero. A unity has the properties of 1 in the real numbers, and the zero has the properties of 0. Also, addition and multiplication must return an element in &lt;script type=&quot;math/tex&quot;&gt;\mathbb{R}&lt;/script&gt; when performed using two elements of &lt;script type=&quot;math/tex&quot;&gt;\mathbb{R}&lt;/script&gt;, and work the same way they do normally (associativity, commutativity, and distributivity). And, there has to be additive and multiplicative inverses in &lt;script type=&quot;math/tex&quot;&gt;\mathbb{R}&lt;/script&gt; for every element of &lt;script type=&quot;math/tex&quot;&gt;\mathbb{R}&lt;/script&gt;. So, if you pick any real number, there’s another number you can add to it that will give you zero (additive inverse). You can also find a number you can multiply by to get one (unless the number you picked was zero).&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;script type=&quot;math/tex&quot;&gt;\mathbb{R}&lt;/script&gt; is a completely ordered set.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This says that &lt;script type=&quot;math/tex&quot;&gt;\leq&lt;/script&gt; works the way it normally does on &lt;script type=&quot;math/tex&quot;&gt;\mathbb{R}&lt;/script&gt;. All the numbers have a specific order. This isn’t true for all sets of numbers (specifically, the set of complex numbers aren’t ordered).&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;The order of &lt;script type=&quot;math/tex&quot;&gt;\mathbb{R}&lt;/script&gt; is preserved under &lt;script type=&quot;math/tex&quot;&gt;\times&lt;/script&gt; and &lt;script type=&quot;math/tex&quot;&gt;+&lt;/script&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If we have &lt;script type=&quot;math/tex&quot;&gt;x, y, z\in\mathbb{R}&lt;/script&gt; and &lt;script type=&quot;math/tex&quot;&gt;x\leq y&lt;/script&gt;, then &lt;script type=&quot;math/tex&quot;&gt;x+z \leq y+z&lt;/script&gt;.  Also, if &lt;script type=&quot;math/tex&quot;&gt;0 \leq x,y&lt;/script&gt; then &lt;script type=&quot;math/tex&quot;&gt;0\leq x\times y&lt;/script&gt;.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;For every non-empty subset of &lt;script type=&quot;math/tex&quot;&gt;\mathbb{R}&lt;/script&gt; bounded above, there is a least upper bound (known as the &lt;a href=&quot;https://en.wikipedia.org/wiki/Infimum_and_supremum&quot;&gt;Supremum&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This last one is the only one that isn’t really intuitive. Basically, it says that for any set of real numbers we make, we can pick a number that is bigger than everything in the set so that there isn’t another smaller number bigger than everything in the set. I’ll illustrate this with a few examples. Let’s look at the sets &lt;script type=&quot;math/tex&quot;&gt;\{1, 2, 3, 4, ...\}&lt;/script&gt;, &lt;script type=&quot;math/tex&quot;&gt;\{1, 2, 3, 4,\}&lt;/script&gt;, and &lt;script type=&quot;math/tex&quot;&gt;\{ 1, 1.9, 1.99,  1.999, ...\}&lt;/script&gt;. The first set is equivalent to &lt;script type=&quot;math/tex&quot;&gt;\mathbb{N}&lt;/script&gt;, and always keeps going up. This means it is not bounded above, so it doesn’t have a least upper bound. The next set contains only 1-4. It is bounded above by 4, since it is a finite set, and 4 is the highest number in the set. Since, there isn’t a number less than 4 that is greater than or equal to 4 (a funny but necessary statement), we know that 4 is the least upper bound. The third set is slightly more interesting. It increases infinitely, but we can see that it will never reach a value greater than 2. The problem is deciding whether 2 is the lowest possible number that is greater than everything in the set. Let’s say we pick a number &lt;script type=&quot;math/tex&quot;&gt;x&lt;/script&gt;, slightly less than 2. But, if we keep moving to the right and picking numbers in our third set closer and closer to 2, we will eventually find a number &lt;script type=&quot;math/tex&quot;&gt;z&lt;/script&gt;, such that &lt;script type=&quot;math/tex&quot;&gt;z &gt; x&lt;/script&gt;. Of course, we could pick a number bigger than &lt;script type=&quot;math/tex&quot;&gt;z&lt;/script&gt; but less than 2, but we can just pick a larger number from the set. So, 2 must be the least upper bound. A fun fact,  this implies that the real numbers posses the Archimedean Property discussed above.&lt;/p&gt;

&lt;p&gt;Alfred Tarski created an equivalent &lt;a href=&quot;https://en.wikipedia.org/wiki/Tarski%27s_axiomatization_of_the_reals&quot;&gt;axiomatization&lt;/a&gt; that is  technically simpler, but whose axioms aren’t as intuitive (in my personal opinion).&lt;/p&gt;
&lt;h3 id=&quot;constructions&quot;&gt;Constructions&lt;/h3&gt;
&lt;p&gt;There are many ways of constructing the real numbers, and people are always trying to come up with newer simpler ways of doing so. I’ll just go over the two most famous constructions: Cauchy Sequences and Dedekind Cuts.&lt;/p&gt;

&lt;p&gt;A sequence is a list of numbers &lt;script type=&quot;math/tex&quot;&gt;x_1, x_2, x_3, ...&lt;/script&gt; . For example &lt;script type=&quot;math/tex&quot;&gt;12, 3, 23, ...&lt;/script&gt;
is a sequence (though not a particularly useful one). A Cauchy sequence is a sequence of rational numbers that converges to a single real number. How do we decide if it converges to a single real number you ask? The sequence has to meet a single stipulation: if we pick any number &lt;script type=&quot;math/tex&quot;&gt;\epsilon \in \mathbb{Q}&lt;/script&gt; with &lt;script type=&quot;math/tex&quot;&gt;\epsilon &gt; 0&lt;/script&gt;, then we can find some point in our sequence where the difference between any two terms after that point will be less than the value we pick. In other words, if we have some Cauchy sequence &lt;script type=&quot;math/tex&quot;&gt;x&lt;/script&gt;, there are integers &lt;script type=&quot;math/tex&quot;&gt;n&lt;/script&gt; and &lt;script type=&quot;math/tex&quot;&gt;m&lt;/script&gt; which are bigger than some integer &lt;script type=&quot;math/tex&quot;&gt;N &gt; 0&lt;/script&gt; where &lt;script type=&quot;math/tex&quot;&gt;% &lt;![CDATA[
|x_n - x_m| &lt; \epsilon %]]&gt;&lt;/script&gt;. It turns out that if we have two Cauchy sequences, we can add them and multiply them term by term, and the resulting sequence will converge to the sum or product of the values the two sequences converged to separately. Basically, sequences themselves possess the same properties as the real numbers. So, we can say that every real number is the pretty much the same as the Cauchy sequences that converge to it, and that all Cauchy sequences that converge to the same number are basically the same (we use an &lt;a href=&quot;https://en.wikipedia.org/wiki/Construction_of_the_real_numbers#Construction_from_Cauchy_sequences&quot;&gt;equivalence relation&lt;/a&gt; for this). So, there, a definition of any real number.&lt;/p&gt;

&lt;p&gt;We can also use Dedekind cuts. A Dedekind cut is given by two sets &lt;script type=&quot;math/tex&quot;&gt;(A, B)&lt;/script&gt;. &lt;script type=&quot;math/tex&quot;&gt;A&lt;/script&gt; must have an upper bound, and &lt;script type=&quot;math/tex&quot;&gt;B&lt;/script&gt; must have a lower bound. &lt;script type=&quot;math/tex&quot;&gt;A&lt;/script&gt; cannot have a a greatest element (i.e. it is an infinite set with a least upper bound). We can make these two sets out of rational numbers, and use the pairs of sets to define real numbers. Let’s use this method to define &lt;script type=&quot;math/tex&quot;&gt;\sqrt{2}&lt;/script&gt;  (the classic example). Let &lt;script type=&quot;math/tex&quot;&gt;A&lt;/script&gt; be the set of all rational whose square is less than 2. So, if &lt;script type=&quot;math/tex&quot;&gt;x \in A&lt;/script&gt; then &lt;script type=&quot;math/tex&quot;&gt;% &lt;![CDATA[
x^2 &lt; 2 %]]&gt;&lt;/script&gt;. Let &lt;script type=&quot;math/tex&quot;&gt;B&lt;/script&gt; be any rational whose square is greater than 2. These two are sets for a Dedekind cut of &lt;script type=&quot;math/tex&quot;&gt;\sqrt{2}&lt;/script&gt;, but this is not obvious. We have to show that there isn’t a greatest element in &lt;script type=&quot;math/tex&quot;&gt;A&lt;/script&gt;, or that for every &lt;script type=&quot;math/tex&quot;&gt;x \in A&lt;/script&gt;, there is some &lt;script type=&quot;math/tex&quot;&gt;y \in A&lt;/script&gt; where &lt;script type=&quot;math/tex&quot;&gt;% &lt;![CDATA[
x &lt; y %]]&gt;&lt;/script&gt; and &lt;script type=&quot;math/tex&quot;&gt;% &lt;![CDATA[
y^2 &lt; 2 %]]&gt;&lt;/script&gt;. We could do this by finding some specific &lt;script type=&quot;math/tex&quot;&gt;y&lt;/script&gt; in terms of &lt;script type=&quot;math/tex&quot;&gt;x&lt;/script&gt; that satisfies our conditions to show that one exists. But, I’m not in the mood for analysis, so I’m just going to tell you that there must be a number that satisfies the conditions for &lt;script type=&quot;math/tex&quot;&gt;y&lt;/script&gt;, because there is a rational number between any two rational numbers (or real numbers for that matter). So, this gives us a cut that leaves only &lt;script type=&quot;math/tex&quot;&gt;\sqrt{2}&lt;/script&gt; between sets &lt;script type=&quot;math/tex&quot;&gt;A&lt;/script&gt; and &lt;script type=&quot;math/tex&quot;&gt;B&lt;/script&gt;. The nice thing about Dedekind cuts, as opposed to Cauchy sequences, is that there is only one unique pair of sets that we can use to define each real number, while there are infinitely many Cauchy sequences.&lt;/p&gt;

&lt;p&gt;A final note about constructions. There are finitely many letters and symbols that can be used in mathematics. Thus, there are countably many definitions we can construct for real numbers, even though the real numbers themselves aren’t countable. This makes the counstruction method of defining real numbers slightly weaker than using axioms. That’s fine, because constructions are really only useful to give us a clear idea of what a real number “is”, anyway.&lt;/p&gt;</content><author><name></name></author><summary type="html">This is a question that may not have occurred to you. What is a real number? Can we explicitly define all of them? It’s harder than it sounds. It took us until about 100 years ago to really pin down what they are, and how to construct them. Here’s a brief synopsis of their history, and some modern definitions of the original uncountable set.</summary></entry><entry><title type="html">Lambda Calculus Simple Reduction Examples</title><link href="http://localhost:4000/2018/04/12/Lambda-Calculus-Reduction-Examples.html" rel="alternate" type="text/html" title="Lambda Calculus Simple Reduction Examples" /><published>2018-04-12T00:00:00-05:00</published><updated>2018-04-12T00:00:00-05:00</updated><id>http://localhost:4000/2018/04/12/Lambda%20Calculus-Reduction-Examples</id><content type="html" xml:base="http://localhost:4000/2018/04/12/Lambda-Calculus-Reduction-Examples.html">&lt;p&gt;This is a post I made for a now defunct blog my friends and I ran in 2018. I think it’s an interesting topic, so I’m putting it up here.&lt;/p&gt;

&lt;p&gt;I’ve been studying Lambda Calculus lately, and I realized that there isn’t exactly a wealth of examples for reducing expressions.I might just be a dummy, but I find that looking at examples really helps me wrap my head around things.  So, in the interest of helping someone else who might be struggling, I have decided to give a brief explanantion of &lt;script type=&quot;math/tex&quot;&gt;\lambda&lt;/script&gt;-calculus, and provide some simple examples of reduction that would help a beginner get going.&lt;/p&gt;
&lt;h3 id=&quot;what-is-lambda-calculus&quot;&gt;What is Lambda Calculus?&lt;/h3&gt;
&lt;p&gt;Simply put, &lt;script type=&quot;math/tex&quot;&gt;\lambda&lt;/script&gt;-calculus is a system of mathematics based only on applying functions to other functions. If you’ve ever heard of &lt;a href=&quot;http://googology.wikia.com/wiki/Peano_arithmetic&quot;&gt;Peano Arithemtic&lt;/a&gt;, it’s a pursit in a similar vein. The goal is to create as simple a formal system as possible that can still be used to solve complex problems. In the case of Peano arithmetic, we show that we only need a few axioms about natural numbers to prove a whole bunch of stuff. Lambda calculus does the same thing, but instead of proving things about numbers, we can prove things about computation. The system can be shown to be Turing complete, and allows us to determine whether problems are computable by algorithm. Though it can behave like a Turing machine, &lt;script type=&quot;math/tex&quot;&gt;\lambda&lt;/script&gt;- calculus generally feels more like working with a high-level programming language. In fact, many programming languages have been developed based on lambda calculus. They are classified as functional languages, and they include: Haskell (named after &lt;a href=&quot;https://en.wikipedia.org/wiki/Haskell_Curry&quot;&gt;Haskell Curry&lt;/a&gt;), F#, O-Caml, and Lisp. There are functional aspects of many other programming languages.&lt;/p&gt;
&lt;h3 id=&quot;some-good-resources&quot;&gt;Some Good Resources&lt;/h3&gt;
&lt;p&gt;The basic concepts of &lt;script type=&quot;math/tex&quot;&gt;\lambda&lt;/script&gt;-calculus were kind of hard for me to wrap my head around, so in the interest of helping someone who may stumble upon this page, I have a few links that might help with understanding the basics:&lt;/p&gt;

&lt;p&gt;This one has some good illustrations, but the bird analogy becomes very tedious:
&lt;a href=&quot;http://dkeenan.com/Lambda/&quot;&gt;http://dkeenan.com/Lambda/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A lot of people seem to think this is clever, but I haven’t seen anyone saying they actually learned &lt;script type=&quot;math/tex&quot;&gt;\lambda&lt;/script&gt;-calculus with it:
&lt;a href=&quot;http://worrydream.com/AlligatorEggs/&quot;&gt;http://worrydream.com/AlligatorEggs/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I’ve been working through this textbook  It’s very mathy, which is probably why I had so much trouble to start. But, if you like proof based exercises and mathematical rigour, this is a good option:
&lt;a href=&quot;http://www.cse.chalmers.se/research/group/logic/TypesSS05/Extra/geuvers.pdf&quot;&gt;http://www.cse.chalmers.se/research/group/logic/TypesSS05/Extra/geuvers.pdf&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Honestly, the thing that helped me the most was this Stack Overflow response:
&lt;a href=&quot;https://stackoverflow.com/questions/34140819/lambda-calculus-reduction-steps&quot;&gt;https://stackoverflow.com/questions/34140819/lambda-calculus-reduction-steps&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In any case, if you’re here, you probably have a resource that you’re working with.&lt;/p&gt;
&lt;h3 id=&quot;examples&quot;&gt;Examples&lt;/h3&gt;
&lt;p&gt;I’m going to writing these examples based on the notation given in the textbook above. This may be slightly different than what you’re using, so I’ll try to make note of how notation may differ.
 
&lt;script type=&quot;math/tex&quot;&gt;\lambda xy.((\lambda x.yx)((\lambda z.z)x))&lt;/script&gt;
 
Firstly, I’ll point out that a lot of resources write out a lambda for each bound variable (i.e. &lt;script type=&quot;math/tex&quot;&gt;\lambda x \lambda y.xy = \lambda xy.xy&lt;/script&gt;), but it’s fine to drop the extra lambdas and just assume every variable before the “.” is bound. The first thing we need to do is figure out where the most deeply nested application is. That would be &lt;script type=&quot;math/tex&quot;&gt;\lambda xy.((\lambda x.yx)((\underline{\lambda z.z)x}))&lt;/script&gt;. So, we’ll apply our function &lt;script type=&quot;math/tex&quot;&gt;\lambda z.z&lt;/script&gt; to &lt;script type=&quot;math/tex&quot;&gt;x&lt;/script&gt;. We can write this as &lt;script type=&quot;math/tex&quot;&gt;(z)[z := x]&lt;/script&gt;. The := is the substitution operator, so we’re substituting every &lt;script type=&quot;math/tex&quot;&gt;z&lt;/script&gt; in &lt;script type=&quot;math/tex&quot;&gt;(z)&lt;/script&gt; with the variable &lt;script type=&quot;math/tex&quot;&gt;x&lt;/script&gt;. This then reduces to &lt;script type=&quot;math/tex&quot;&gt;(x)&lt;/script&gt;. This is known formally as &lt;em&gt;Beta-Reduction&lt;/em&gt;. Now we have:
 
&lt;script type=&quot;math/tex&quot;&gt;\lambda xy.((\lambda x.yx)((\lambda z.z)x)) = \lambda xy.((\lambda x.yx)((x)))&lt;/script&gt;
 
If we remove the unnecessary parentheses, we get &lt;script type=&quot;math/tex&quot;&gt;\lambda xy.(\underline{(\lambda x.yx)x})&lt;/script&gt; as our next application. Now, we substitute &lt;script type=&quot;math/tex&quot;&gt;(yx)[x := x]&lt;/script&gt; and get &lt;script type=&quot;math/tex&quot;&gt;(yx)&lt;/script&gt;. This leaves:
 
&lt;script type=&quot;math/tex&quot;&gt;\lambda xy.(yx)&lt;/script&gt; or &lt;script type=&quot;math/tex&quot;&gt;\lambda xy.yx&lt;/script&gt; 
 
which is a function that swaps the order of two parameters.&lt;/p&gt;

&lt;p&gt;This is a simple example to showcase &lt;em&gt;Alpha&lt;/em&gt; &lt;em&gt;Conversion&lt;/em&gt;:
&lt;script type=&quot;math/tex&quot;&gt;\lambda x.(\lambda y.xy)y&lt;/script&gt;
This expression can be reduced by substituting the &lt;script type=&quot;math/tex&quot;&gt;x&lt;/script&gt;’s in &lt;script type=&quot;math/tex&quot;&gt;(\lambda y.xy)&lt;/script&gt; for &lt;script type=&quot;math/tex&quot;&gt;y&lt;/script&gt;, or so it seems. The problem is that the function we are substituting into already has a variable named &lt;script type=&quot;math/tex&quot;&gt;y&lt;/script&gt;, and this is not necessarily the same as the &lt;script type=&quot;math/tex&quot;&gt;y&lt;/script&gt; on the outside. If you’re familiar with programming, it’s the equivalent of declaring variables of the same name in a different namespaces. Fortunately, &lt;script type=&quot;math/tex&quot;&gt;\alpha&lt;/script&gt;-conversion lets us change variable names. So, all we have to do is change the &lt;script type=&quot;math/tex&quot;&gt;y&lt;/script&gt; on the outside to something else, like &lt;script type=&quot;math/tex&quot;&gt;y'&lt;/script&gt;, &lt;script type=&quot;math/tex&quot;&gt;y_1&lt;/script&gt;, or &lt;script type=&quot;math/tex&quot;&gt;z&lt;/script&gt;. The name doesn’t matter. So:
&lt;script type=&quot;math/tex&quot;&gt;\lambda x.(\lambda y.xy)y = \lambda x.(\lambda y.xy)z&lt;/script&gt;
&lt;script type=&quot;math/tex&quot;&gt;(\lambda y.xy)[x := z]&lt;/script&gt;
&lt;script type=&quot;math/tex&quot;&gt;\lambda y.zy&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;So, there are some (hopefully understandable) written descriptions. Now, I’ll just show work for some more problems, and make notes if necessary.&lt;/p&gt;

&lt;p&gt;&lt;script type=&quot;math/tex&quot;&gt;((\lambda x.((\lambda y .(xy)x))(\lambda z.w))&lt;/script&gt;
Here, it turns out that the first application is with &lt;script type=&quot;math/tex&quot;&gt;\lambda x&lt;/script&gt; and &lt;script type=&quot;math/tex&quot;&gt;(\lambda z.w)&lt;/script&gt;. 
&lt;script type=&quot;math/tex&quot;&gt;(\lambda y.(xy)x)[x:=\lambda z.w]&lt;/script&gt;
&lt;script type=&quot;math/tex&quot;&gt;\lambda y.((\lambda z.w)y)(\lambda z.w)&lt;/script&gt;
&lt;script type=&quot;math/tex&quot;&gt;((\lambda z.w)y)[y := \lambda  z.w]&lt;/script&gt;
&lt;script type=&quot;math/tex&quot;&gt;(\lambda z.w)(\lambda z.w)&lt;/script&gt;
&lt;script type=&quot;math/tex&quot;&gt;w[z := \lambda z.w]&lt;/script&gt;
Since there aren’t any &lt;script type=&quot;math/tex&quot;&gt;z&lt;/script&gt;’s in &lt;script type=&quot;math/tex&quot;&gt;w&lt;/script&gt;, our result is simply &lt;script type=&quot;math/tex&quot;&gt;w&lt;/script&gt;.&lt;/p&gt;
&lt;h3 id=&quot;encodings&quot;&gt;Encodings&lt;/h3&gt;
&lt;p&gt;So, one of the big things people like to do with lambda calculus is make encodings that do things similar to numbers or logical operators. It’s kind of boring to just reduce these expressions for no reason, so I’ll be using some encodings for my examples. A few simple ones are encodings for True, False, and Not.
True = &lt;script type=&quot;math/tex&quot;&gt;\lambda xy.x&lt;/script&gt;
False = &lt;script type=&quot;math/tex&quot;&gt;\lambda xy.y&lt;/script&gt;
Not = &lt;script type=&quot;math/tex&quot;&gt;\lambda x.((x false) true)&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;So, now that we have these, let’s evaluate some logical expressions using &lt;script type=&quot;math/tex&quot;&gt;\lambda&lt;/script&gt;-calculus, :
not false
(not)(&lt;script type=&quot;math/tex&quot;&gt;\lambda xy.y&lt;/script&gt;)
&lt;script type=&quot;math/tex&quot;&gt;(\lambda x.((x&lt;/script&gt; false&lt;script type=&quot;math/tex&quot;&gt;)&lt;/script&gt; true&lt;script type=&quot;math/tex&quot;&gt;))(\lambda xy.y)&lt;/script&gt;
&lt;script type=&quot;math/tex&quot;&gt;((\lambda xy.y (&lt;/script&gt; false&lt;script type=&quot;math/tex&quot;&gt;) (&lt;/script&gt; true&lt;script type=&quot;math/tex&quot;&gt;)&lt;/script&gt;
&lt;script type=&quot;math/tex&quot;&gt;((\lambda xy.y (\lambda xy.y)(\lambda xy.x)&lt;/script&gt;
&lt;script type=&quot;math/tex&quot;&gt;(\lambda xy.x)&lt;/script&gt;
Which is the function we defined as true.
So, we can see that applying our not function to the false function returns the true function. Isn’t that neat?&lt;/p&gt;

&lt;p&gt;Let’s test out something a little more complicated:
not (not true)
&lt;script type=&quot;math/tex&quot;&gt;(\lambda x.((x\,\,\,false))&lt;/script&gt; true)&lt;strong&gt;(not&lt;/strong&gt; &lt;strong&gt;true)&lt;/strong&gt;
(&lt;strong&gt;(not&lt;/strong&gt; &lt;strong&gt;true)&lt;/strong&gt; false) true
(((&lt;script type=&quot;math/tex&quot;&gt;\lambda&lt;/script&gt; xy.((x false) true)  &lt;strong&gt;true&lt;/strong&gt;)  false)( true)
Note the number of parentheses, this is how we can tell we are applying the “not” function to the second “true”. Also, in the step before, we can see the “not” is being applied to that “true”. It can get hard to keep track of the parentheses, so it’s important to be aware of what you’re doing over all the steps.&lt;/p&gt;

&lt;p&gt;(((true false) true) false) true
(((&lt;script type=&quot;math/tex&quot;&gt;\lambda&lt;/script&gt; xy.x false) true) false) true
(((&lt;script type=&quot;math/tex&quot;&gt;\lambda&lt;/script&gt; y.false) true) false) true
((false) false) true
&lt;script type=&quot;math/tex&quot;&gt;\lambda&lt;/script&gt; xy.y (false) (true)
true&lt;/p&gt;

&lt;p&gt;It worked again!
That’s all for now. I’m planning on making a post on &lt;a href=&quot;https://en.wikipedia.org/wiki/Church_encoding&quot;&gt;Church Numerals&lt;/a&gt; after some other various posts.&lt;/p&gt;</content><author><name></name></author><summary type="html">This is a post I made for a now defunct blog my friends and I ran in 2018. I think it’s an interesting topic, so I’m putting it up here.</summary></entry></feed>